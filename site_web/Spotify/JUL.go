package spotify

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

// Déclaration de la variable qui va contenir les données
var DecodeDataJUL JULGlobal

type JULGlobal struct {
	Items     []Items `json:"items"`
	UserToken string
}

type Items struct {
	NomAlbumJul string   `json:"name"`
	ReleaseJul  string   `json:"release_date"`
	NbMusique   int      `json:"total_tracks"`
	Images      []Images `json:"images"`
}

type Images struct {
	ImgUrl string `json:"url"`
}

var JUL JULGlobal

// Lien vers l'API
func APIJUL() {
	URLJUL := "https://api.spotify.com/v1/artists/3IW7ScrzXmPvZhB27hmfgy/albums?market=FR"

	//Init Client
	httpClient := http.Client{
		Timeout: time.Second * 2,
	}

	//Créer requête HTTP
	req, errReq := http.NewRequest(http.MethodGet, URLJUL, nil)
	if errReq != nil {
		fmt.Println("Erreur avec la requête : ", errReq.Error())
		return
	}

	// métadonnée dans le header
	req.Header.Add("Authorization", "Bearer "+JUL.UserToken)

	//Exécution HTTP
	res, errRes := httpClient.Do(req)
	if errRes != nil {
		fmt.Println("Erreur lors de la requête HTTP")
	}
	defer res.Body.Close()
	//Lecture et Récup de la requête
	body, errBody := io.ReadAll(res.Body)
	if errBody != nil {
		fmt.Println("Problème avec lecture du corps")
	}

	//Décodage des données
	if err := json.Unmarshal(body, &DecodeDataJUL); err != nil {
		fmt.Println("Erreur lors du décodage des données JSON (Nom problablement incorrect)")
		return
	}
}
