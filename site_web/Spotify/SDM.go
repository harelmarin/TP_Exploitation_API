package spotify

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

// Déclaration de la variable qui va contenir les données
var DecodeDataSDM SDMGlobal

// STRUCT SDM PAGE
// STRUCT GLOBAL DE SDM
type SDMGlobal struct {
	SDMAlbum   SDMAlbum     `json:"album"`
	SDMArtists []SDMArtists `json:"artists"`
	URL        URL          `json:"external_urls"`
	NomTitre   string       `json:"name"`
	UserToken  string
}

// STRUCT ALBUM SDM
type SDMAlbum struct {
	SDMNameAlbum string     `json:"name"`
	Release      string     `json:"release_date"`
	SDMImage     []SDMImage `json:"images"`
}

// STRUCT ARTIST SDM
type SDMArtists struct {
	Nom string `json:"name"`
}

type SDMImage struct {
	Url string `json:"url"`
}
type URL struct {
	Spotify string `json:"spotify"`
}

var SDM SDMGlobal

// Lien vers l'API
func APISDM() {
	URLSDM := "https://api.spotify.com/v1/tracks/0EzNyXyU7gHzj2TN8qYThj?market=FR"

	//Init Client
	httpClient := http.Client{
		Timeout: time.Second * 2,
	}

	//Créer requête HTTP
	req, errReq := http.NewRequest(http.MethodGet, URLSDM, nil)
	if errReq != nil {
		fmt.Println("Erreur avec la requête : ", errReq.Error())
		return
	}

	// métadonnée dans le header
	req.Header.Add("Authorization", "Bearer "+SDM.UserToken)

	//Exécution HTTP
	res, errRes := httpClient.Do(req)
	if errRes != nil {
		fmt.Println("Erreur lors de la requête HTTP")
	}
	defer res.Body.Close()
	//Lecture et Récup de la requête
	body, errBody := io.ReadAll(res.Body)
	if errBody != nil {
		fmt.Println("Problème avec lecture du corps")
	}

	//Décodage des données
	if err := json.Unmarshal(body, &DecodeDataSDM); err != nil {
		fmt.Println("Erreur lors du décodage des données JSON (Nom problablement incorrect)")
		return
	}

}
